////
/// Sass functions, documented with SassDoc.
///
/// @group utilities
////

/// Helper function for calling colors from the PROJECT_C color Sass map.
///
/// @link http://www.sitepoint.com/using-sass-maps/
/// @author Hugo Giraudel
///
/// @example scss - Sass
///   a {
///     color: color(link);
///     background-color: color(background);
///     border-bottom: 1px color(border) solid;
///    }
///
/// @example css - CSS output
///   a {
///     color: #b31b1b;
///     background-color: #fff;
///     border-bottom: 1px #e8e1d9 solid;
///   }
///
/// @param {color} $key - Variable name

@function color($key) {
  @if map-has-key($colors, $key) {
    @return map-get($colors, $key);
  }

  @warn 'Unknown `#{$key}` in $colors.';
  @return null;
}

/// Helper function for calling widths from the PROJECT_C width Sass map.
///
/// @author Ivan Boothe
///
/// @example scss - Sass
///   div {
///     width: width(imagestyle__people--small);
///     margin-left: width(footer-height);
///     top: width(content-aside);
///    }
///
/// @example css - CSS output
///   div {
///     width: 75px;
///     margin-left: 10rem;
///     top: 15rem;
///   }
///
/// @param {width} $key - Variable name

@function width($key) {
  @if map-has-key($widths, $key) {
    @return map-get($widths, $key);
  }

  @warn 'Unknown `#{$key}` in $widths.';
  @return null;
}

/// Helper function for converting rem units to pixels. Requires the Typey vendor library.
///
/// @author Ivan Boothe
///
/// @param {string} $rem - Size, in rems

@function rempx($rem) {
  // Strip units, if any.
  $num: $rem / ($rem * 0 + 1);
  // Return rems based on Typey font size.
  @return $num * $base-font-size;
}

/// Helper function for including full image asset path.
///
/// @author Roy Tomeij
///
/// @param {path} $filename - Image file name
/// @param {path} $image-path ['/profiles/project_c/themes/project_c_base_responsive/images/min/'] - Image assets directory, relative path rom the webroot

@function image($filename, $image-path: '/profiles/project_c/themes/project_c_base_responsive/images/min/') {
  @return url('#{$image-path}#{$filename}');
}

/// Replace characters in a string.
///
/// @link http://codepen.io/Tigt/blog/optimizing-svgs-in-data-uris
/// @author Jakob Eriksen

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
    str-replace(str-slice($string, $index +
    str-length($search)), $search, $replace);
  }
  @return $string;
}

/// Create an optimized SVG data string for embedding.
///
/// @requires str-replace
///
/// @link http://codepen.io/tigt/post/optimizing-svgs-in-data-uris
/// @author Jakob Eriksen

@function svg-url($svg) {
  // Chunk up string in order to avoid "stack level too deep" error
  $encoded: '';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);

    // Encode (may need a few extra replacements)
    $chunk: str-replace($chunk, '"', '\'');
    $chunk: str-replace($chunk, '<', '%3C');
    $chunk: str-replace($chunk, '>', '%3E');
    $chunk: str-replace($chunk, '&', '%26');
    $chunk: str-replace($chunk, '#', '%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml,#{$encoded}");
}
